include arlib/Makefile-head

PROGRAM = arlibtest
#valid values: exe, dll, hybrid (usable as both exe and dll)
ARTYPE = hybrid
ARGUI = 0
ARGAME = 1
AROPENGL = 0
ARTHREAD = 1
ARWUTF = 0
ARSOCKET = 1
#valid values: openssl (default), gnutls, bearssl, no (can enable multiple, if space separated, but it's useful only for testing)
ARSOCKET_SSL = openssl bearssl
#valid values: schannel (default unless ARSOCKET_SSL is set), bearssl, no (others may work, not tested)
ARSOCKET_SSL_WINDOWS = schannel bearssl
# Controls whether the program has a console window on Windows.
# Valid values: 0, 1 (default if ARGUI and ARGAME are disabled), error (default if ARGUI or ARGAME is enabled), hybrid
# 1 - enable console window
# 0 - disable console window, and delete every printf and puts call, since they don't work and just waste space
# error - disable console window, and turn printf and puts into errors, as a reminder that they don't work
# hybrid - disable console window, but compile printf/puts calls; if the program calls window_console_attach(), they will work
# Ignored on Linux.
ARTERMINAL = 1

ifeq ($(OS),windows)
  ARGUI = 0
endif

# For Windows, Arlib can target a minimum version of either XP or 7. Latter is recommended and default;
#  XP support slows down some things and disables some functionality (for example, SRWLock requires Vista or higher).
# Arlib may compile for other targets, but it's not tested and may break.
# In addition to 0 and 1, the value 32 is supported, and means 1 if compiling as 32bit, otherwise 0.
ARXPSUPPORT = 0

#honored variables, in addition to the ones listed here:
#OPT, PROFILE, DEBUG, STRIP (CLI)
#  OPT=1 enables heavy optimizations; OPT=spd is OPT=1 but -O3 instead of -Os (not guaranteed to be faster, Arlib is tuned for -Os)
#  PROFILE=gen/opt are for PGO
#  DEBUG=1 (default if not OPT) includes debug info; DEBUG=0 STRIP=0 keeps function names but deletes other debug info
#CFLAGS, LFLAGS, CC, CXX, LD (CLI)
#  override compiler choice, add additional flags
#OBJNAME (CLI)
#  added to object file names, to allow building for multiple platforms without a make clean
#  if not set, it's autogenerated from target platform, OPT, whether it's compiling tests or not, and some other parameters
#  rarely if ever needs to be manually specified
#ASAN (CLI)
#  if 1, enables -fsanitize=address
#TF, TR (CLI)
#  TF runs only tests whose name contains the given string (case insensitive), for example TF=json
#  TR is prefixed to the program when running the tests, for example valgrind (default), gdb, strace, or blank (just run it directly)
#  these two are only effective for the make test family
#CONF_CFLAGS, CONF_LFLAGS
#  additional compiler/linker flags needed by this program
#EXCEPTIONS
#  set to 1 if needed
#  not recommended; many parts of Arlib are not exception safe, exception support inhibits many optimizations,
#  and it adds a few hundred kilobytes on Windows
#  (tests throw exceptions on failure, and automatically enable them, but tests don't need to be fast, leak-free, or shipped)
#SOURCES
#  extra files to compile, in addition to *.cpp
#  supports .c and .cpp
#SOURCES_NOWARN
#  like SOURCES, but compiled with warnings disabled
#  should only be used for unmodified third-party code
#SOURCES_FOO, CFLAGS_FOO, DOMAINS
#  SOURCES_FOO is compiled with CFLAGS_FOO, in addition to the global ones
#  requires 'DOMAINS += FOO'
#  (SOURCES and SOURCES_NOWARN are implemented as domains)
#the ones labeled (CLI) should not be set by the program's makefile, but should instead be reserved for command-line arguments

#don't use this, it specifies that Arlib itself is the project here. More specifically, it enables Arlib's own tests.
ARLIB_MAIN = 1
ifeq ($(SELFTEST),)
  $(warning if you wish to run Arlib's tests, use make test instead)
  $(error if you seek something actually useful, type make somewhere else, for example one of the subprojects)
endif
include arlib/Makefile

#TODO: do I want a ./configure that verifies (maybe even caches) dependencies?
#  if yes, must make sure multiple platforms can be configured simultaneously
